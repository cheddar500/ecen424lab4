                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f48002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6d801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | # Header
                            | # • Your name and ID.
                            | #   - Chet Taylor, tchested
                            | # • A high level description of my code telling how and why:
                            | #   - I rolled out the loop to reduce loop overhead
                            | #   - I added iaddq to eliminate the need to store immediates in 
                            | #     registers before using them
                            | 
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Chet Taylor, tchested
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 
                            | #rax count
                            | #rdi src
                            | #rsi dst
                            | #rdx len
                            | #rcx i
                            | #r8 
                            | #r9
                            | #r10 
                            | #r11 
                            | #rbx
                            | #r12
                            | #r13
                            | #r14  
                            | 
                            | 	# Loop header
0x032: 30f00000000000000000 | 	irmovq $0,%rax		# count = 0;
0x03c: 30f10000000000000000 | 	irmovq $0,%rcx      # i = 0;
0x046: 6222                 | 	andq %rdx,%rdx		# len <= 0?Done:Loop1
                            | 	#check if divisble by 4
0x048: 2028                 | 	rrmovq %rdx, %r8  #len to r8
0x04a: 6118                 | 	subq %rcx,%r8     #len-=i   
0x04c: c0f8fcffffffffffffff | 	iaddq $-4,%r8  #r8-4
0x056: 723a01000000000000   | 	jl Loop2
                            | 	
                            | 
                            | ##################################################################
0x05f:                      | Loop1:  # unroll by factor of 3
                            |     #for(i=0;i+k-1<n;i+=k) -> k=4
                            | 	#for(i=0;i+3<len;i+=4)
                            | 
                            |     #x[i] = x[i] + s
0x05f: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x069: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# read val from src...
0x073: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x07d: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x087: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x091: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	# ...and store it to dst
0x09b: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0a5: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
                            | 
0x0af: 6288                 | 	andq %r8, %r8		# val <= 0?count++:skip
0x0b1: 71c400000000000000   | 	jle Subloop1		# if so, goto Subloop1:
0x0ba: c0f00100000000000000 | 	iaddq $1, %rax		#count++
                            | 
                            | 
0x0c4:                      | Subloop1:
                            | 	#x[i+1] = x[i+1] + s
0x0c4: 6299                 | 	andq %r9, %r9		# val <= 0?count++:skip
0x0c6: 71d900000000000000   | 	jle Subloop2		# if so, goto Subloop2:
0x0cf: c0f00100000000000000 | 	iaddq $1, %rax		#count++
                            | 
                            | 
0x0d9:                      | Subloop2:
                            | 	#x[i+2] = x[i+2] + s
0x0d9: 62aa                 | 	andq %r10, %r10		# val <= 0?count++:skip
0x0db: 71ee00000000000000   | 	jle Subloop3		    # if so, goto Subloop3:  
0x0e4: c0f00100000000000000 | 	iaddq $1, %rax		#count++
                            | 
0x0ee:                      | Subloop3:
                            | 	#x[i+3] = x[i+3] + s
0x0ee: 62bb                 | 	andq %r11, %r11		# val <= 0?count++:skip
0x0f0: 710301000000000000   | 	jle Npos		    # if so, goto Npos:  
0x0f9: c0f00100000000000000 | 	iaddq $1, %rax		#count++
                            | 
0x103:                      | Npos:	
                            | 	# dont need to subtract anymore, now compare with i
0x103: c0f72000000000000000 | 	iaddq $32, %rdi		# src++
0x10d: c0f62000000000000000 | 	iaddq $32, %rsi		# dst++
                            | 
                            | 	
                            | 	#execute the increment step: i+=4
0x117: c0f10400000000000000 | 	iaddq $4,%rcx 
                            | 
                            | 	# i + k - 1 = i + 3 < len b/c k = 4
                            | 	#test the condition: i+3<len 
0x121: 201c                 | 	rrmovq %rcx,%r12   #copy i to r12
0x123: c0fc0300000000000000 | 	iaddq $3, %r12     #add 3 to i copy 
0x12d: 202d                 | 	rrmovq %rdx,%r13  #copy len to r13
0x12f: 61cd                 | 	subq %r12,%r13     #len-(i+3) copies
0x131: 765f00000000000000   | 	jg Loop1			# if so, goto Loop1:
                            | 
                            | 
                            | ##################################################################
0x13a:                      | Loop2: # the og loop
                            |     #for(/*empty*/;i<len;i++)
                            | 
                            | 	#check if done or not i>=len
0x13a: 201b                 | 	rrmovq %rcx, %r11  #i to r11
0x13c: 202c                 | 	rrmovq %rdx, %r12  #len to r12
0x13e: 61cb                 | 	subq %r12,%r11
0x140: 759901000000000000   | 	jge Done
                            | 
                            | 
0x149: 50870000000000000000 | 	mrmovq (%rdi), %r8   # read val from src...
0x153: 40860000000000000000 | 	rmmovq %r8, (%rsi)   # ...and store it to dst
0x15d: 6288                 | 	andq %r8, %r8        # val <= 0?count++:skip
0x15f: 717201000000000000   | 	jle Npos2            # if so, goto Npos:
0x168: c0f00100000000000000 | 	iaddq $1, %rax      # count++
0x172:                      | Npos2: 
                            | 	# dont need to subtract anymore, now compare with i
0x172: c0f70800000000000000 | 	iaddq $8, %rdi # src++
0x17c: c0f60800000000000000 | 	iaddq $8, %rsi # dst++
                            | 
0x186: c0f10100000000000000 | 	iaddq $1,%rcx #i++
0x190: 703a01000000000000   | 	jmp Loop2 # jg if so, goto Loop:
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x199:                      | Done:
0x199: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x19a:                      | End:
                            | #/* $end ncopy-ys */
0x19a:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1a0:                      | 	.align 8
0x1a0:                      | src:
0x1a0: ffffffffffffffff     | 	.quad -1
0x1a8: 0200000000000000     | 	.quad 2
0x1b0: fdffffffffffffff     | 	.quad -3
0x1b8: 0400000000000000     | 	.quad 4
0x1c0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x1d0:                      | 	.align 16
0x1d0:                      | Predest:
0x1d0: fadebc0000000000     | 	.quad 0xbcdefa
0x1d8:                      | dest:
0x1d8: abefcd0000000000     | 	.quad 0xcdefab
0x1e0: abefcd0000000000     | 	.quad 0xcdefab
0x1e8: abefcd0000000000     | 	.quad 0xcdefab
0x1f0: abefcd0000000000     | 	.quad 0xcdefab
0x1f8:                      | Postdest:
0x1f8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x200:                      | .align 8
                            | # Run time stack
0x200: 0000000000000000     | 	.quad 0
0x208: 0000000000000000     | 	.quad 0
0x210: 0000000000000000     | 	.quad 0
0x218: 0000000000000000     | 	.quad 0
0x220: 0000000000000000     | 	.quad 0
0x228: 0000000000000000     | 	.quad 0
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
                            | 
0x280:                      | Stack:
