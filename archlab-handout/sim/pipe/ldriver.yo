                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f42806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6a803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | # Header
                            | # • Your name and ID.
                            | #   - Chet Taylor, tchested
                            | # • A high level description of my code telling how and why:
                            | #   - I rolled out the loop to reduce loop overhead
                            | #   - I added iaddq to eliminate the need to store immediates in 
                            | #     registers before using them
                            | 
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Chet Taylor, tchested
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 
                            | #rax count
                            | #rdi src
                            | #rsi dst
                            | #rdx len
                            | #rcx i
                            | #r8 
                            | #r9
                            | #r10 
                            | #r11 
                            | #rbx
                            | #r12
                            | #r13
                            | #r14  
                            | 
                            | 	# Loop header
0x032: 30f00000000000000000 | 	irmovq $0,%rax		# count = 0;
0x03c: 30f10000000000000000 | 	irmovq $0,%rcx      # i = 0;
0x046: 6222                 | 	andq %rdx,%rdx		# len <= 0?Done:Loop1
                            | 	#check if divisble by 4
0x048: 2028                 | 	rrmovq %rdx, %r8  #len to r8
0x04a: 6118                 | 	subq %rcx,%r8     #len-=i   
0x04c: c0f8fcffffffffffffff | 	iaddq $-4,%r8  #r8-4
0x056: 723a01000000000000   | 	jl Loop2
                            | 	
                            | 
                            | ##################################################################
0x05f:                      | Loop1:  # unroll by factor of 3
                            |     #for(i=0;i+k-1<n;i+=k) -> k=4
                            | 	#for(i=0;i+3<len;i+=4)
                            | 
                            |     #x[i] = x[i] + s
0x05f: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x069: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# read val from src...
0x073: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x07d: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x087: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x091: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	# ...and store it to dst
0x09b: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0a5: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
                            | 
0x0af: 6288                 | 	andq %r8, %r8		# val <= 0?count++:skip
0x0b1: 71c400000000000000   | 	jle Subloop1		# if so, goto Subloop1:
0x0ba: c0f00100000000000000 | 	iaddq $1, %rax		#count++
                            | 
                            | 
0x0c4:                      | Subloop1:
                            | 	#x[i+1] = x[i+1] + s
0x0c4: 6299                 | 	andq %r9, %r9		# val <= 0?count++:skip
0x0c6: 71d900000000000000   | 	jle Subloop2		# if so, goto Subloop2:
0x0cf: c0f00100000000000000 | 	iaddq $1, %rax		#count++
                            | 
                            | 
0x0d9:                      | Subloop2:
                            | 	#x[i+2] = x[i+2] + s
0x0d9: 62aa                 | 	andq %r10, %r10		# val <= 0?count++:skip
0x0db: 71ee00000000000000   | 	jle Subloop3		    # if so, goto Subloop3:  
0x0e4: c0f00100000000000000 | 	iaddq $1, %rax		#count++
                            | 
0x0ee:                      | Subloop3:
                            | 	#x[i+3] = x[i+3] + s
0x0ee: 62bb                 | 	andq %r11, %r11		# val <= 0?count++:skip
0x0f0: 710301000000000000   | 	jle Npos		    # if so, goto Npos:  
0x0f9: c0f00100000000000000 | 	iaddq $1, %rax		#count++
                            | 
0x103:                      | Npos:	
                            | 	# dont need to subtract anymore, now compare with i
0x103: c0f72000000000000000 | 	iaddq $32, %rdi		# src++
0x10d: c0f62000000000000000 | 	iaddq $32, %rsi		# dst++
                            | 
                            | 	
                            | 	#execute the increment step: i+=4
0x117: c0f10400000000000000 | 	iaddq $4,%rcx 
                            | 
                            | 	# i + k - 1 = i + 3 < len b/c k = 4
                            | 	#test the condition: i+3<len 
0x121: 201c                 | 	rrmovq %rcx,%r12   #copy i to r12
0x123: c0fc0300000000000000 | 	iaddq $3, %r12     #add 3 to i copy 
0x12d: 202d                 | 	rrmovq %rdx,%r13  #copy len to r13
0x12f: 61cd                 | 	subq %r12,%r13     #len-(i+3) copies
0x131: 765f00000000000000   | 	jg Loop1			# if so, goto Loop1:
                            | 
                            | 
                            | ##################################################################
0x13a:                      | Loop2: # the og loop
                            |     #for(/*empty*/;i<len;i++)
                            | 
                            | 	#check if done or not i>=len
0x13a: 201b                 | 	rrmovq %rcx, %r11  #i to r11
0x13c: 202c                 | 	rrmovq %rdx, %r12  #len to r12
0x13e: 61cb                 | 	subq %r12,%r11
0x140: 759901000000000000   | 	jge Done
                            | 
                            | 
0x149: 50870000000000000000 | 	mrmovq (%rdi), %r8   # read val from src...
0x153: 40860000000000000000 | 	rmmovq %r8, (%rsi)   # ...and store it to dst
0x15d: 6288                 | 	andq %r8, %r8        # val <= 0?count++:skip
0x15f: 717201000000000000   | 	jle Npos2            # if so, goto Npos:
0x168: c0f00100000000000000 | 	iaddq $1, %rax      # count++
0x172:                      | Npos2: 
                            | 	# dont need to subtract anymore, now compare with i
0x172: c0f70800000000000000 | 	iaddq $8, %rdi # src++
0x17c: c0f60800000000000000 | 	iaddq $8, %rsi # dst++
                            | 
0x186: c0f10100000000000000 | 	iaddq $1,%rcx #i++
0x190: 703a01000000000000   | 	jmp Loop2 # jg if so, goto Loop:
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x199:                      | Done:
0x199: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x19a:                      | End:
                            | #/* $end ncopy-ys */
0x19a:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1a0:                      | 	.align 8
0x1a0:                      | src:
0x1a0: 0100000000000000     | 	.quad 1
0x1a8: feffffffffffffff     | 	.quad -2
0x1b0: fdffffffffffffff     | 	.quad -3
0x1b8: fcffffffffffffff     | 	.quad -4
0x1c0: fbffffffffffffff     | 	.quad -5
0x1c8: 0600000000000000     | 	.quad 6
0x1d0: 0700000000000000     | 	.quad 7
0x1d8: 0800000000000000     | 	.quad 8
0x1e0: 0900000000000000     | 	.quad 9
0x1e8: f6ffffffffffffff     | 	.quad -10
0x1f0: 0b00000000000000     | 	.quad 11
0x1f8: 0c00000000000000     | 	.quad 12
0x200: f3ffffffffffffff     | 	.quad -13
0x208: f2ffffffffffffff     | 	.quad -14
0x210: f1ffffffffffffff     | 	.quad -15
0x218: 1000000000000000     | 	.quad 16
0x220: 1100000000000000     | 	.quad 17
0x228: 1200000000000000     | 	.quad 18
0x230: edffffffffffffff     | 	.quad -19
0x238: ecffffffffffffff     | 	.quad -20
0x240: 1500000000000000     | 	.quad 21
0x248: eaffffffffffffff     | 	.quad -22
0x250: e9ffffffffffffff     | 	.quad -23
0x258: e8ffffffffffffff     | 	.quad -24
0x260: 1900000000000000     | 	.quad 25
0x268: e6ffffffffffffff     | 	.quad -26
0x270: e5ffffffffffffff     | 	.quad -27
0x278: 1c00000000000000     | 	.quad 28
0x280: 1d00000000000000     | 	.quad 29
0x288: 1e00000000000000     | 	.quad 30
0x290: 1f00000000000000     | 	.quad 31
0x298: 2000000000000000     | 	.quad 32
0x2a0: 2100000000000000     | 	.quad 33
0x2a8: deffffffffffffff     | 	.quad -34
0x2b0: 2300000000000000     | 	.quad 35
0x2b8: dcffffffffffffff     | 	.quad -36
0x2c0: 2500000000000000     | 	.quad 37
0x2c8: 2600000000000000     | 	.quad 38
0x2d0: 2700000000000000     | 	.quad 39
0x2d8: 2800000000000000     | 	.quad 40
0x2e0: d7ffffffffffffff     | 	.quad -41
0x2e8: 2a00000000000000     | 	.quad 42
0x2f0: 2b00000000000000     | 	.quad 43
0x2f8: d4ffffffffffffff     | 	.quad -44
0x300: 2d00000000000000     | 	.quad 45
0x308: 2e00000000000000     | 	.quad 46
0x310: d1ffffffffffffff     | 	.quad -47
0x318: d0ffffffffffffff     | 	.quad -48
0x320: cfffffffffffffff     | 	.quad -49
0x328: ceffffffffffffff     | 	.quad -50
0x330: 3300000000000000     | 	.quad 51
0x338: 3400000000000000     | 	.quad 52
0x340: cbffffffffffffff     | 	.quad -53
0x348: 3600000000000000     | 	.quad 54
0x350: 3700000000000000     | 	.quad 55
0x358: c8ffffffffffffff     | 	.quad -56
0x360: c7ffffffffffffff     | 	.quad -57
0x368: c6ffffffffffffff     | 	.quad -58
0x370: c5ffffffffffffff     | 	.quad -59
0x378: c4ffffffffffffff     | 	.quad -60
0x380: c3ffffffffffffff     | 	.quad -61
0x388: c2ffffffffffffff     | 	.quad -62
0x390: c1ffffffffffffff     | 	.quad -63
0x398: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3a0:                      | 	.align 16
0x3a0:                      | Predest:
0x3a0: fadebc0000000000     | 	.quad 0xbcdefa
0x3a8:                      | dest:
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0:                      | Postdest:
0x5a0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5a8:                      | .align 8
                            | # Run time stack
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
                            | 
0x628:                      | Stack:
